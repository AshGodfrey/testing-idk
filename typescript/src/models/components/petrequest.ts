/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MfaMethods, MfaMethods$ } from "./mfamethods";
import * as z from "zod";

export type PetRequest = {
    /**
     * Name of the pet
     */
    name: string;
    mfaMethods?: Array<MfaMethods> | undefined;
};

/** @internal */
export namespace PetRequest$ {
    export type Inbound = {
        name: string;
        mfaMethods?: Array<MfaMethods> | undefined;
    };

    export const inboundSchema: z.ZodType<PetRequest, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            mfaMethods: z.array(MfaMethods$).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.mfaMethods === undefined ? null : { mfaMethods: v.mfaMethods }),
            };
        });

    export type Outbound = {
        name: string;
        mfaMethods?: Array<MfaMethods> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PetRequest> = z
        .object({
            name: z.string(),
            mfaMethods: z.array(MfaMethods$).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.mfaMethods === undefined ? null : { mfaMethods: v.mfaMethods }),
            };
        });
}
